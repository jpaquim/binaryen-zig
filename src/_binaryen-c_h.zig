pub const BinaryenIndex = u32;
pub const BinaryenType = usize;
pub extern fn BinaryenTypeNone() BinaryenType;
pub extern fn BinaryenTypeInt32() BinaryenType;
pub extern fn BinaryenTypeInt64() BinaryenType;
pub extern fn BinaryenTypeFloat32() BinaryenType;
pub extern fn BinaryenTypeFloat64() BinaryenType;
pub extern fn BinaryenTypeVec128() BinaryenType;
pub extern fn BinaryenTypeFuncref() BinaryenType;
pub extern fn BinaryenTypeExternref() BinaryenType;
pub extern fn BinaryenTypeAnyref() BinaryenType;
pub extern fn BinaryenTypeEqref() BinaryenType;
pub extern fn BinaryenTypeI31ref() BinaryenType;
pub extern fn BinaryenTypeDataref() BinaryenType;
pub extern fn BinaryenTypeStringref() BinaryenType;
pub extern fn BinaryenTypeStringviewWTF8() BinaryenType;
pub extern fn BinaryenTypeStringviewWTF16() BinaryenType;
pub extern fn BinaryenTypeStringviewIter() BinaryenType;
pub extern fn BinaryenTypeUnreachable() BinaryenType;
pub extern fn BinaryenTypeAuto() BinaryenType;
pub extern fn BinaryenTypeCreate(valueTypes: [*c]BinaryenType, numTypes: BinaryenIndex) BinaryenType;
pub extern fn BinaryenTypeArity(t: BinaryenType) u32;
pub extern fn BinaryenTypeExpand(t: BinaryenType, buf: [*c]BinaryenType) void;
pub extern fn BinaryenNone() BinaryenType;
pub extern fn BinaryenInt32() BinaryenType;
pub extern fn BinaryenInt64() BinaryenType;
pub extern fn BinaryenFloat32() BinaryenType;
pub extern fn BinaryenFloat64() BinaryenType;
pub extern fn BinaryenUndefined() BinaryenType;
pub const BinaryenPackedType = u32;
pub extern fn BinaryenPackedTypeNotPacked() BinaryenPackedType;
pub extern fn BinaryenPackedTypeInt8() BinaryenPackedType;
pub extern fn BinaryenPackedTypeInt16() BinaryenPackedType;
pub const BinaryenHeapType = usize;
pub extern fn BinaryenHeapTypeExt() BinaryenHeapType;
pub extern fn BinaryenHeapTypeFunc() BinaryenHeapType;
pub extern fn BinaryenHeapTypeAny() BinaryenHeapType;
pub extern fn BinaryenHeapTypeEq() BinaryenHeapType;
pub extern fn BinaryenHeapTypeI31() BinaryenHeapType;
pub extern fn BinaryenHeapTypeData() BinaryenHeapType;
pub extern fn BinaryenHeapTypeString() BinaryenHeapType;
pub extern fn BinaryenHeapTypeStringviewWTF8() BinaryenHeapType;
pub extern fn BinaryenHeapTypeStringviewWTF16() BinaryenHeapType;
pub extern fn BinaryenHeapTypeStringviewIter() BinaryenHeapType;
pub extern fn BinaryenTypeGetHeapType(@"type": BinaryenType) BinaryenHeapType;
pub extern fn BinaryenTypeIsNullable(@"type": BinaryenType) bool;
pub extern fn BinaryenTypeFromHeapType(heapType: BinaryenHeapType, nullable: bool) BinaryenType;
pub const BinaryenTypeSystem = u32;
pub extern fn BinaryenTypeSystemEquirecursive() BinaryenTypeSystem;
pub extern fn BinaryenTypeSystemNominal() BinaryenTypeSystem;
pub extern fn BinaryenTypeSystemIsorecursive() BinaryenTypeSystem;
pub extern fn BinaryenGetTypeSystem() BinaryenTypeSystem;
pub extern fn BinaryenSetTypeSystem(typeSystem: BinaryenTypeSystem) void;
pub const BinaryenExpressionId = u32;
pub extern fn BinaryenInvalidId() BinaryenExpressionId;
pub extern fn BinaryenNopId() BinaryenExpressionId;
pub extern fn BinaryenBlockId() BinaryenExpressionId;
pub extern fn BinaryenIfId() BinaryenExpressionId;
pub extern fn BinaryenLoopId() BinaryenExpressionId;
pub extern fn BinaryenBreakId() BinaryenExpressionId;
pub extern fn BinaryenSwitchId() BinaryenExpressionId;
pub extern fn BinaryenCallId() BinaryenExpressionId;
pub extern fn BinaryenCallIndirectId() BinaryenExpressionId;
pub extern fn BinaryenLocalGetId() BinaryenExpressionId;
pub extern fn BinaryenLocalSetId() BinaryenExpressionId;
pub extern fn BinaryenGlobalGetId() BinaryenExpressionId;
pub extern fn BinaryenGlobalSetId() BinaryenExpressionId;
pub extern fn BinaryenLoadId() BinaryenExpressionId;
pub extern fn BinaryenStoreId() BinaryenExpressionId;
pub extern fn BinaryenAtomicRMWId() BinaryenExpressionId;
pub extern fn BinaryenAtomicCmpxchgId() BinaryenExpressionId;
pub extern fn BinaryenAtomicWaitId() BinaryenExpressionId;
pub extern fn BinaryenAtomicNotifyId() BinaryenExpressionId;
pub extern fn BinaryenAtomicFenceId() BinaryenExpressionId;
pub extern fn BinaryenSIMDExtractId() BinaryenExpressionId;
pub extern fn BinaryenSIMDReplaceId() BinaryenExpressionId;
pub extern fn BinaryenSIMDShuffleId() BinaryenExpressionId;
pub extern fn BinaryenSIMDTernaryId() BinaryenExpressionId;
pub extern fn BinaryenSIMDShiftId() BinaryenExpressionId;
pub extern fn BinaryenSIMDLoadId() BinaryenExpressionId;
pub extern fn BinaryenSIMDLoadStoreLaneId() BinaryenExpressionId;
pub extern fn BinaryenMemoryInitId() BinaryenExpressionId;
pub extern fn BinaryenDataDropId() BinaryenExpressionId;
pub extern fn BinaryenMemoryCopyId() BinaryenExpressionId;
pub extern fn BinaryenMemoryFillId() BinaryenExpressionId;
pub extern fn BinaryenConstId() BinaryenExpressionId;
pub extern fn BinaryenUnaryId() BinaryenExpressionId;
pub extern fn BinaryenBinaryId() BinaryenExpressionId;
pub extern fn BinaryenSelectId() BinaryenExpressionId;
pub extern fn BinaryenDropId() BinaryenExpressionId;
pub extern fn BinaryenReturnId() BinaryenExpressionId;
pub extern fn BinaryenMemorySizeId() BinaryenExpressionId;
pub extern fn BinaryenMemoryGrowId() BinaryenExpressionId;
pub extern fn BinaryenUnreachableId() BinaryenExpressionId;
pub extern fn BinaryenPopId() BinaryenExpressionId;
pub extern fn BinaryenRefNullId() BinaryenExpressionId;
pub extern fn BinaryenRefIsId() BinaryenExpressionId;
pub extern fn BinaryenRefFuncId() BinaryenExpressionId;
pub extern fn BinaryenRefEqId() BinaryenExpressionId;
pub extern fn BinaryenTableGetId() BinaryenExpressionId;
pub extern fn BinaryenTableSetId() BinaryenExpressionId;
pub extern fn BinaryenTableSizeId() BinaryenExpressionId;
pub extern fn BinaryenTableGrowId() BinaryenExpressionId;
pub extern fn BinaryenTryId() BinaryenExpressionId;
pub extern fn BinaryenThrowId() BinaryenExpressionId;
pub extern fn BinaryenRethrowId() BinaryenExpressionId;
pub extern fn BinaryenTupleMakeId() BinaryenExpressionId;
pub extern fn BinaryenTupleExtractId() BinaryenExpressionId;
pub extern fn BinaryenI31NewId() BinaryenExpressionId;
pub extern fn BinaryenI31GetId() BinaryenExpressionId;
pub extern fn BinaryenCallRefId() BinaryenExpressionId;
pub extern fn BinaryenRefTestId() BinaryenExpressionId;
pub extern fn BinaryenRefCastId() BinaryenExpressionId;
pub extern fn BinaryenBrOnId() BinaryenExpressionId;
pub extern fn BinaryenStructNewId() BinaryenExpressionId;
pub extern fn BinaryenStructGetId() BinaryenExpressionId;
pub extern fn BinaryenStructSetId() BinaryenExpressionId;
pub extern fn BinaryenArrayNewId() BinaryenExpressionId;
pub extern fn BinaryenArrayInitId() BinaryenExpressionId;
pub extern fn BinaryenArrayGetId() BinaryenExpressionId;
pub extern fn BinaryenArraySetId() BinaryenExpressionId;
pub extern fn BinaryenArrayLenId() BinaryenExpressionId;
pub extern fn BinaryenArrayCopyId() BinaryenExpressionId;
pub extern fn BinaryenRefAsId() BinaryenExpressionId;
pub extern fn BinaryenStringNewId() BinaryenExpressionId;
pub extern fn BinaryenStringConstId() BinaryenExpressionId;
pub extern fn BinaryenStringMeasureId() BinaryenExpressionId;
pub extern fn BinaryenStringEncodeId() BinaryenExpressionId;
pub extern fn BinaryenStringConcatId() BinaryenExpressionId;
pub extern fn BinaryenStringEqId() BinaryenExpressionId;
pub extern fn BinaryenStringAsId() BinaryenExpressionId;
pub extern fn BinaryenStringWTF8AdvanceId() BinaryenExpressionId;
pub extern fn BinaryenStringWTF16GetId() BinaryenExpressionId;
pub extern fn BinaryenStringIterNextId() BinaryenExpressionId;
pub extern fn BinaryenStringIterMoveId() BinaryenExpressionId;
pub extern fn BinaryenStringSliceWTFId() BinaryenExpressionId;
pub extern fn BinaryenStringSliceIterId() BinaryenExpressionId;
pub const BinaryenExternalKind = u32;
pub extern fn BinaryenExternalFunction() BinaryenExternalKind;
pub extern fn BinaryenExternalTable() BinaryenExternalKind;
pub extern fn BinaryenExternalMemory() BinaryenExternalKind;
pub extern fn BinaryenExternalGlobal() BinaryenExternalKind;
pub extern fn BinaryenExternalTag() BinaryenExternalKind;
pub const BinaryenFeatures = u32;
pub extern fn BinaryenFeatureMVP() BinaryenFeatures;
pub extern fn BinaryenFeatureAtomics() BinaryenFeatures;
pub extern fn BinaryenFeatureBulkMemory() BinaryenFeatures;
pub extern fn BinaryenFeatureMutableGlobals() BinaryenFeatures;
pub extern fn BinaryenFeatureNontrappingFPToInt() BinaryenFeatures;
pub extern fn BinaryenFeatureSignExt() BinaryenFeatures;
pub extern fn BinaryenFeatureSIMD128() BinaryenFeatures;
pub extern fn BinaryenFeatureExceptionHandling() BinaryenFeatures;
pub extern fn BinaryenFeatureTailCall() BinaryenFeatures;
pub extern fn BinaryenFeatureReferenceTypes() BinaryenFeatures;
pub extern fn BinaryenFeatureMultivalue() BinaryenFeatures;
pub extern fn BinaryenFeatureGC() BinaryenFeatures;
pub extern fn BinaryenFeatureMemory64() BinaryenFeatures;
pub extern fn BinaryenFeatureRelaxedSIMD() BinaryenFeatures;
pub extern fn BinaryenFeatureExtendedConst() BinaryenFeatures;
pub extern fn BinaryenFeatureStrings() BinaryenFeatures;
pub extern fn BinaryenFeatureAll() BinaryenFeatures;
pub const struct_BinaryenModule = opaque {};
pub const BinaryenModuleRef = ?*struct_BinaryenModule;
pub extern fn BinaryenModuleCreate() BinaryenModuleRef;
pub extern fn BinaryenModuleDispose(module: BinaryenModuleRef) void;
const union_unnamed_1 = extern union {
    i32: i32,
    i64: i64,
    f32: f32,
    f64: f64,
    v128: [16]u8,
    func: [*c]const u8,
};
pub const struct_BinaryenLiteral = extern struct {
    type: usize,
    unnamed_0: union_unnamed_1,
};
pub extern fn BinaryenLiteralInt32(x: i32) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralInt64(x: i64) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralFloat32(x: f32) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralFloat64(x: f64) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralVec128(x: [*c]const u8) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralFloat32Bits(x: i32) struct_BinaryenLiteral;
pub extern fn BinaryenLiteralFloat64Bits(x: i64) struct_BinaryenLiteral;
pub const BinaryenOp = i32;
pub extern fn BinaryenClzInt32() BinaryenOp;
pub extern fn BinaryenCtzInt32() BinaryenOp;
pub extern fn BinaryenPopcntInt32() BinaryenOp;
pub extern fn BinaryenNegFloat32() BinaryenOp;
pub extern fn BinaryenAbsFloat32() BinaryenOp;
pub extern fn BinaryenCeilFloat32() BinaryenOp;
pub extern fn BinaryenFloorFloat32() BinaryenOp;
pub extern fn BinaryenTruncFloat32() BinaryenOp;
pub extern fn BinaryenNearestFloat32() BinaryenOp;
pub extern fn BinaryenSqrtFloat32() BinaryenOp;
pub extern fn BinaryenEqZInt32() BinaryenOp;
pub extern fn BinaryenClzInt64() BinaryenOp;
pub extern fn BinaryenCtzInt64() BinaryenOp;
pub extern fn BinaryenPopcntInt64() BinaryenOp;
pub extern fn BinaryenNegFloat64() BinaryenOp;
pub extern fn BinaryenAbsFloat64() BinaryenOp;
pub extern fn BinaryenCeilFloat64() BinaryenOp;
pub extern fn BinaryenFloorFloat64() BinaryenOp;
pub extern fn BinaryenTruncFloat64() BinaryenOp;
pub extern fn BinaryenNearestFloat64() BinaryenOp;
pub extern fn BinaryenSqrtFloat64() BinaryenOp;
pub extern fn BinaryenEqZInt64() BinaryenOp;
pub extern fn BinaryenExtendSInt32() BinaryenOp;
pub extern fn BinaryenExtendUInt32() BinaryenOp;
pub extern fn BinaryenWrapInt64() BinaryenOp;
pub extern fn BinaryenTruncSFloat32ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSFloat32ToInt64() BinaryenOp;
pub extern fn BinaryenTruncUFloat32ToInt32() BinaryenOp;
pub extern fn BinaryenTruncUFloat32ToInt64() BinaryenOp;
pub extern fn BinaryenTruncSFloat64ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSFloat64ToInt64() BinaryenOp;
pub extern fn BinaryenTruncUFloat64ToInt32() BinaryenOp;
pub extern fn BinaryenTruncUFloat64ToInt64() BinaryenOp;
pub extern fn BinaryenReinterpretFloat32() BinaryenOp;
pub extern fn BinaryenReinterpretFloat64() BinaryenOp;
pub extern fn BinaryenConvertSInt32ToFloat32() BinaryenOp;
pub extern fn BinaryenConvertSInt32ToFloat64() BinaryenOp;
pub extern fn BinaryenConvertUInt32ToFloat32() BinaryenOp;
pub extern fn BinaryenConvertUInt32ToFloat64() BinaryenOp;
pub extern fn BinaryenConvertSInt64ToFloat32() BinaryenOp;
pub extern fn BinaryenConvertSInt64ToFloat64() BinaryenOp;
pub extern fn BinaryenConvertUInt64ToFloat32() BinaryenOp;
pub extern fn BinaryenConvertUInt64ToFloat64() BinaryenOp;
pub extern fn BinaryenPromoteFloat32() BinaryenOp;
pub extern fn BinaryenDemoteFloat64() BinaryenOp;
pub extern fn BinaryenReinterpretInt32() BinaryenOp;
pub extern fn BinaryenReinterpretInt64() BinaryenOp;
pub extern fn BinaryenExtendS8Int32() BinaryenOp;
pub extern fn BinaryenExtendS16Int32() BinaryenOp;
pub extern fn BinaryenExtendS8Int64() BinaryenOp;
pub extern fn BinaryenExtendS16Int64() BinaryenOp;
pub extern fn BinaryenExtendS32Int64() BinaryenOp;
pub extern fn BinaryenAddInt32() BinaryenOp;
pub extern fn BinaryenSubInt32() BinaryenOp;
pub extern fn BinaryenMulInt32() BinaryenOp;
pub extern fn BinaryenDivSInt32() BinaryenOp;
pub extern fn BinaryenDivUInt32() BinaryenOp;
pub extern fn BinaryenRemSInt32() BinaryenOp;
pub extern fn BinaryenRemUInt32() BinaryenOp;
pub extern fn BinaryenAndInt32() BinaryenOp;
pub extern fn BinaryenOrInt32() BinaryenOp;
pub extern fn BinaryenXorInt32() BinaryenOp;
pub extern fn BinaryenShlInt32() BinaryenOp;
pub extern fn BinaryenShrUInt32() BinaryenOp;
pub extern fn BinaryenShrSInt32() BinaryenOp;
pub extern fn BinaryenRotLInt32() BinaryenOp;
pub extern fn BinaryenRotRInt32() BinaryenOp;
pub extern fn BinaryenEqInt32() BinaryenOp;
pub extern fn BinaryenNeInt32() BinaryenOp;
pub extern fn BinaryenLtSInt32() BinaryenOp;
pub extern fn BinaryenLtUInt32() BinaryenOp;
pub extern fn BinaryenLeSInt32() BinaryenOp;
pub extern fn BinaryenLeUInt32() BinaryenOp;
pub extern fn BinaryenGtSInt32() BinaryenOp;
pub extern fn BinaryenGtUInt32() BinaryenOp;
pub extern fn BinaryenGeSInt32() BinaryenOp;
pub extern fn BinaryenGeUInt32() BinaryenOp;
pub extern fn BinaryenAddInt64() BinaryenOp;
pub extern fn BinaryenSubInt64() BinaryenOp;
pub extern fn BinaryenMulInt64() BinaryenOp;
pub extern fn BinaryenDivSInt64() BinaryenOp;
pub extern fn BinaryenDivUInt64() BinaryenOp;
pub extern fn BinaryenRemSInt64() BinaryenOp;
pub extern fn BinaryenRemUInt64() BinaryenOp;
pub extern fn BinaryenAndInt64() BinaryenOp;
pub extern fn BinaryenOrInt64() BinaryenOp;
pub extern fn BinaryenXorInt64() BinaryenOp;
pub extern fn BinaryenShlInt64() BinaryenOp;
pub extern fn BinaryenShrUInt64() BinaryenOp;
pub extern fn BinaryenShrSInt64() BinaryenOp;
pub extern fn BinaryenRotLInt64() BinaryenOp;
pub extern fn BinaryenRotRInt64() BinaryenOp;
pub extern fn BinaryenEqInt64() BinaryenOp;
pub extern fn BinaryenNeInt64() BinaryenOp;
pub extern fn BinaryenLtSInt64() BinaryenOp;
pub extern fn BinaryenLtUInt64() BinaryenOp;
pub extern fn BinaryenLeSInt64() BinaryenOp;
pub extern fn BinaryenLeUInt64() BinaryenOp;
pub extern fn BinaryenGtSInt64() BinaryenOp;
pub extern fn BinaryenGtUInt64() BinaryenOp;
pub extern fn BinaryenGeSInt64() BinaryenOp;
pub extern fn BinaryenGeUInt64() BinaryenOp;
pub extern fn BinaryenAddFloat32() BinaryenOp;
pub extern fn BinaryenSubFloat32() BinaryenOp;
pub extern fn BinaryenMulFloat32() BinaryenOp;
pub extern fn BinaryenDivFloat32() BinaryenOp;
pub extern fn BinaryenCopySignFloat32() BinaryenOp;
pub extern fn BinaryenMinFloat32() BinaryenOp;
pub extern fn BinaryenMaxFloat32() BinaryenOp;
pub extern fn BinaryenEqFloat32() BinaryenOp;
pub extern fn BinaryenNeFloat32() BinaryenOp;
pub extern fn BinaryenLtFloat32() BinaryenOp;
pub extern fn BinaryenLeFloat32() BinaryenOp;
pub extern fn BinaryenGtFloat32() BinaryenOp;
pub extern fn BinaryenGeFloat32() BinaryenOp;
pub extern fn BinaryenAddFloat64() BinaryenOp;
pub extern fn BinaryenSubFloat64() BinaryenOp;
pub extern fn BinaryenMulFloat64() BinaryenOp;
pub extern fn BinaryenDivFloat64() BinaryenOp;
pub extern fn BinaryenCopySignFloat64() BinaryenOp;
pub extern fn BinaryenMinFloat64() BinaryenOp;
pub extern fn BinaryenMaxFloat64() BinaryenOp;
pub extern fn BinaryenEqFloat64() BinaryenOp;
pub extern fn BinaryenNeFloat64() BinaryenOp;
pub extern fn BinaryenLtFloat64() BinaryenOp;
pub extern fn BinaryenLeFloat64() BinaryenOp;
pub extern fn BinaryenGtFloat64() BinaryenOp;
pub extern fn BinaryenGeFloat64() BinaryenOp;
pub extern fn BinaryenAtomicRMWAdd() BinaryenOp;
pub extern fn BinaryenAtomicRMWSub() BinaryenOp;
pub extern fn BinaryenAtomicRMWAnd() BinaryenOp;
pub extern fn BinaryenAtomicRMWOr() BinaryenOp;
pub extern fn BinaryenAtomicRMWXor() BinaryenOp;
pub extern fn BinaryenAtomicRMWXchg() BinaryenOp;
pub extern fn BinaryenTruncSatSFloat32ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSatSFloat32ToInt64() BinaryenOp;
pub extern fn BinaryenTruncSatUFloat32ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSatUFloat32ToInt64() BinaryenOp;
pub extern fn BinaryenTruncSatSFloat64ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSatSFloat64ToInt64() BinaryenOp;
pub extern fn BinaryenTruncSatUFloat64ToInt32() BinaryenOp;
pub extern fn BinaryenTruncSatUFloat64ToInt64() BinaryenOp;
pub extern fn BinaryenSplatVecI8x16() BinaryenOp;
pub extern fn BinaryenExtractLaneSVecI8x16() BinaryenOp;
pub extern fn BinaryenExtractLaneUVecI8x16() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecI8x16() BinaryenOp;
pub extern fn BinaryenSplatVecI16x8() BinaryenOp;
pub extern fn BinaryenExtractLaneSVecI16x8() BinaryenOp;
pub extern fn BinaryenExtractLaneUVecI16x8() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecI16x8() BinaryenOp;
pub extern fn BinaryenSplatVecI32x4() BinaryenOp;
pub extern fn BinaryenExtractLaneVecI32x4() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecI32x4() BinaryenOp;
pub extern fn BinaryenSplatVecI64x2() BinaryenOp;
pub extern fn BinaryenExtractLaneVecI64x2() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecI64x2() BinaryenOp;
pub extern fn BinaryenSplatVecF32x4() BinaryenOp;
pub extern fn BinaryenExtractLaneVecF32x4() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecF32x4() BinaryenOp;
pub extern fn BinaryenSplatVecF64x2() BinaryenOp;
pub extern fn BinaryenExtractLaneVecF64x2() BinaryenOp;
pub extern fn BinaryenReplaceLaneVecF64x2() BinaryenOp;
pub extern fn BinaryenEqVecI8x16() BinaryenOp;
pub extern fn BinaryenNeVecI8x16() BinaryenOp;
pub extern fn BinaryenLtSVecI8x16() BinaryenOp;
pub extern fn BinaryenLtUVecI8x16() BinaryenOp;
pub extern fn BinaryenGtSVecI8x16() BinaryenOp;
pub extern fn BinaryenGtUVecI8x16() BinaryenOp;
pub extern fn BinaryenLeSVecI8x16() BinaryenOp;
pub extern fn BinaryenLeUVecI8x16() BinaryenOp;
pub extern fn BinaryenGeSVecI8x16() BinaryenOp;
pub extern fn BinaryenGeUVecI8x16() BinaryenOp;
pub extern fn BinaryenEqVecI16x8() BinaryenOp;
pub extern fn BinaryenNeVecI16x8() BinaryenOp;
pub extern fn BinaryenLtSVecI16x8() BinaryenOp;
pub extern fn BinaryenLtUVecI16x8() BinaryenOp;
pub extern fn BinaryenGtSVecI16x8() BinaryenOp;
pub extern fn BinaryenGtUVecI16x8() BinaryenOp;
pub extern fn BinaryenLeSVecI16x8() BinaryenOp;
pub extern fn BinaryenLeUVecI16x8() BinaryenOp;
pub extern fn BinaryenGeSVecI16x8() BinaryenOp;
pub extern fn BinaryenGeUVecI16x8() BinaryenOp;
pub extern fn BinaryenEqVecI32x4() BinaryenOp;
pub extern fn BinaryenNeVecI32x4() BinaryenOp;
pub extern fn BinaryenLtSVecI32x4() BinaryenOp;
pub extern fn BinaryenLtUVecI32x4() BinaryenOp;
pub extern fn BinaryenGtSVecI32x4() BinaryenOp;
pub extern fn BinaryenGtUVecI32x4() BinaryenOp;
pub extern fn BinaryenLeSVecI32x4() BinaryenOp;
pub extern fn BinaryenLeUVecI32x4() BinaryenOp;
pub extern fn BinaryenGeSVecI32x4() BinaryenOp;
pub extern fn BinaryenGeUVecI32x4() BinaryenOp;
pub extern fn BinaryenEqVecI64x2() BinaryenOp;
pub extern fn BinaryenNeVecI64x2() BinaryenOp;
pub extern fn BinaryenLtSVecI64x2() BinaryenOp;
pub extern fn BinaryenGtSVecI64x2() BinaryenOp;
pub extern fn BinaryenLeSVecI64x2() BinaryenOp;
pub extern fn BinaryenGeSVecI64x2() BinaryenOp;
pub extern fn BinaryenEqVecF32x4() BinaryenOp;
pub extern fn BinaryenNeVecF32x4() BinaryenOp;
pub extern fn BinaryenLtVecF32x4() BinaryenOp;
pub extern fn BinaryenGtVecF32x4() BinaryenOp;
pub extern fn BinaryenLeVecF32x4() BinaryenOp;
pub extern fn BinaryenGeVecF32x4() BinaryenOp;
pub extern fn BinaryenEqVecF64x2() BinaryenOp;
pub extern fn BinaryenNeVecF64x2() BinaryenOp;
pub extern fn BinaryenLtVecF64x2() BinaryenOp;
pub extern fn BinaryenGtVecF64x2() BinaryenOp;
pub extern fn BinaryenLeVecF64x2() BinaryenOp;
pub extern fn BinaryenGeVecF64x2() BinaryenOp;
pub extern fn BinaryenNotVec128() BinaryenOp;
pub extern fn BinaryenAndVec128() BinaryenOp;
pub extern fn BinaryenOrVec128() BinaryenOp;
pub extern fn BinaryenXorVec128() BinaryenOp;
pub extern fn BinaryenAndNotVec128() BinaryenOp;
pub extern fn BinaryenBitselectVec128() BinaryenOp;
pub extern fn BinaryenAnyTrueVec128() BinaryenOp;
pub extern fn BinaryenPopcntVecI8x16() BinaryenOp;
pub extern fn BinaryenAbsVecI8x16() BinaryenOp;
pub extern fn BinaryenNegVecI8x16() BinaryenOp;
pub extern fn BinaryenAllTrueVecI8x16() BinaryenOp;
pub extern fn BinaryenBitmaskVecI8x16() BinaryenOp;
pub extern fn BinaryenShlVecI8x16() BinaryenOp;
pub extern fn BinaryenShrSVecI8x16() BinaryenOp;
pub extern fn BinaryenShrUVecI8x16() BinaryenOp;
pub extern fn BinaryenAddVecI8x16() BinaryenOp;
pub extern fn BinaryenAddSatSVecI8x16() BinaryenOp;
pub extern fn BinaryenAddSatUVecI8x16() BinaryenOp;
pub extern fn BinaryenSubVecI8x16() BinaryenOp;
pub extern fn BinaryenSubSatSVecI8x16() BinaryenOp;
pub extern fn BinaryenSubSatUVecI8x16() BinaryenOp;
pub extern fn BinaryenMinSVecI8x16() BinaryenOp;
pub extern fn BinaryenMinUVecI8x16() BinaryenOp;
pub extern fn BinaryenMaxSVecI8x16() BinaryenOp;
pub extern fn BinaryenMaxUVecI8x16() BinaryenOp;
pub extern fn BinaryenAvgrUVecI8x16() BinaryenOp;
pub extern fn BinaryenAbsVecI16x8() BinaryenOp;
pub extern fn BinaryenNegVecI16x8() BinaryenOp;
pub extern fn BinaryenAllTrueVecI16x8() BinaryenOp;
pub extern fn BinaryenBitmaskVecI16x8() BinaryenOp;
pub extern fn BinaryenShlVecI16x8() BinaryenOp;
pub extern fn BinaryenShrSVecI16x8() BinaryenOp;
pub extern fn BinaryenShrUVecI16x8() BinaryenOp;
pub extern fn BinaryenAddVecI16x8() BinaryenOp;
pub extern fn BinaryenAddSatSVecI16x8() BinaryenOp;
pub extern fn BinaryenAddSatUVecI16x8() BinaryenOp;
pub extern fn BinaryenSubVecI16x8() BinaryenOp;
pub extern fn BinaryenSubSatSVecI16x8() BinaryenOp;
pub extern fn BinaryenSubSatUVecI16x8() BinaryenOp;
pub extern fn BinaryenMulVecI16x8() BinaryenOp;
pub extern fn BinaryenMinSVecI16x8() BinaryenOp;
pub extern fn BinaryenMinUVecI16x8() BinaryenOp;
pub extern fn BinaryenMaxSVecI16x8() BinaryenOp;
pub extern fn BinaryenMaxUVecI16x8() BinaryenOp;
pub extern fn BinaryenAvgrUVecI16x8() BinaryenOp;
pub extern fn BinaryenQ15MulrSatSVecI16x8() BinaryenOp;
pub extern fn BinaryenExtMulLowSVecI16x8() BinaryenOp;
pub extern fn BinaryenExtMulHighSVecI16x8() BinaryenOp;
pub extern fn BinaryenExtMulLowUVecI16x8() BinaryenOp;
pub extern fn BinaryenExtMulHighUVecI16x8() BinaryenOp;
pub extern fn BinaryenAbsVecI32x4() BinaryenOp;
pub extern fn BinaryenNegVecI32x4() BinaryenOp;
pub extern fn BinaryenAllTrueVecI32x4() BinaryenOp;
pub extern fn BinaryenBitmaskVecI32x4() BinaryenOp;
pub extern fn BinaryenShlVecI32x4() BinaryenOp;
pub extern fn BinaryenShrSVecI32x4() BinaryenOp;
pub extern fn BinaryenShrUVecI32x4() BinaryenOp;
pub extern fn BinaryenAddVecI32x4() BinaryenOp;
pub extern fn BinaryenSubVecI32x4() BinaryenOp;
pub extern fn BinaryenMulVecI32x4() BinaryenOp;
pub extern fn BinaryenMinSVecI32x4() BinaryenOp;
pub extern fn BinaryenMinUVecI32x4() BinaryenOp;
pub extern fn BinaryenMaxSVecI32x4() BinaryenOp;
pub extern fn BinaryenMaxUVecI32x4() BinaryenOp;
pub extern fn BinaryenDotSVecI16x8ToVecI32x4() BinaryenOp;
pub extern fn BinaryenExtMulLowSVecI32x4() BinaryenOp;
pub extern fn BinaryenExtMulHighSVecI32x4() BinaryenOp;
pub extern fn BinaryenExtMulLowUVecI32x4() BinaryenOp;
pub extern fn BinaryenExtMulHighUVecI32x4() BinaryenOp;
pub extern fn BinaryenAbsVecI64x2() BinaryenOp;
pub extern fn BinaryenNegVecI64x2() BinaryenOp;
pub extern fn BinaryenAllTrueVecI64x2() BinaryenOp;
pub extern fn BinaryenBitmaskVecI64x2() BinaryenOp;
pub extern fn BinaryenShlVecI64x2() BinaryenOp;
pub extern fn BinaryenShrSVecI64x2() BinaryenOp;
pub extern fn BinaryenShrUVecI64x2() BinaryenOp;
pub extern fn BinaryenAddVecI64x2() BinaryenOp;
pub extern fn BinaryenSubVecI64x2() BinaryenOp;
pub extern fn BinaryenMulVecI64x2() BinaryenOp;
pub extern fn BinaryenExtMulLowSVecI64x2() BinaryenOp;
pub extern fn BinaryenExtMulHighSVecI64x2() BinaryenOp;
pub extern fn BinaryenExtMulLowUVecI64x2() BinaryenOp;
pub extern fn BinaryenExtMulHighUVecI64x2() BinaryenOp;
pub extern fn BinaryenAbsVecF32x4() BinaryenOp;
pub extern fn BinaryenNegVecF32x4() BinaryenOp;
pub extern fn BinaryenSqrtVecF32x4() BinaryenOp;
pub extern fn BinaryenAddVecF32x4() BinaryenOp;
pub extern fn BinaryenSubVecF32x4() BinaryenOp;
pub extern fn BinaryenMulVecF32x4() BinaryenOp;
pub extern fn BinaryenDivVecF32x4() BinaryenOp;
pub extern fn BinaryenMinVecF32x4() BinaryenOp;
pub extern fn BinaryenMaxVecF32x4() BinaryenOp;
pub extern fn BinaryenPMinVecF32x4() BinaryenOp;
pub extern fn BinaryenPMaxVecF32x4() BinaryenOp;
pub extern fn BinaryenCeilVecF32x4() BinaryenOp;
pub extern fn BinaryenFloorVecF32x4() BinaryenOp;
pub extern fn BinaryenTruncVecF32x4() BinaryenOp;
pub extern fn BinaryenNearestVecF32x4() BinaryenOp;
pub extern fn BinaryenAbsVecF64x2() BinaryenOp;
pub extern fn BinaryenNegVecF64x2() BinaryenOp;
pub extern fn BinaryenSqrtVecF64x2() BinaryenOp;
pub extern fn BinaryenAddVecF64x2() BinaryenOp;
pub extern fn BinaryenSubVecF64x2() BinaryenOp;
pub extern fn BinaryenMulVecF64x2() BinaryenOp;
pub extern fn BinaryenDivVecF64x2() BinaryenOp;
pub extern fn BinaryenMinVecF64x2() BinaryenOp;
pub extern fn BinaryenMaxVecF64x2() BinaryenOp;
pub extern fn BinaryenPMinVecF64x2() BinaryenOp;
pub extern fn BinaryenPMaxVecF64x2() BinaryenOp;
pub extern fn BinaryenCeilVecF64x2() BinaryenOp;
pub extern fn BinaryenFloorVecF64x2() BinaryenOp;
pub extern fn BinaryenTruncVecF64x2() BinaryenOp;
pub extern fn BinaryenNearestVecF64x2() BinaryenOp;
pub extern fn BinaryenExtAddPairwiseSVecI8x16ToI16x8() BinaryenOp;
pub extern fn BinaryenExtAddPairwiseUVecI8x16ToI16x8() BinaryenOp;
pub extern fn BinaryenExtAddPairwiseSVecI16x8ToI32x4() BinaryenOp;
pub extern fn BinaryenExtAddPairwiseUVecI16x8ToI32x4() BinaryenOp;
pub extern fn BinaryenTruncSatSVecF32x4ToVecI32x4() BinaryenOp;
pub extern fn BinaryenTruncSatUVecF32x4ToVecI32x4() BinaryenOp;
pub extern fn BinaryenConvertSVecI32x4ToVecF32x4() BinaryenOp;
pub extern fn BinaryenConvertUVecI32x4ToVecF32x4() BinaryenOp;
pub extern fn BinaryenLoad8SplatVec128() BinaryenOp;
pub extern fn BinaryenLoad16SplatVec128() BinaryenOp;
pub extern fn BinaryenLoad32SplatVec128() BinaryenOp;
pub extern fn BinaryenLoad64SplatVec128() BinaryenOp;
pub extern fn BinaryenLoad8x8SVec128() BinaryenOp;
pub extern fn BinaryenLoad8x8UVec128() BinaryenOp;
pub extern fn BinaryenLoad16x4SVec128() BinaryenOp;
pub extern fn BinaryenLoad16x4UVec128() BinaryenOp;
pub extern fn BinaryenLoad32x2SVec128() BinaryenOp;
pub extern fn BinaryenLoad32x2UVec128() BinaryenOp;
pub extern fn BinaryenLoad32ZeroVec128() BinaryenOp;
pub extern fn BinaryenLoad64ZeroVec128() BinaryenOp;
pub extern fn BinaryenLoad8LaneVec128() BinaryenOp;
pub extern fn BinaryenLoad16LaneVec128() BinaryenOp;
pub extern fn BinaryenLoad32LaneVec128() BinaryenOp;
pub extern fn BinaryenLoad64LaneVec128() BinaryenOp;
pub extern fn BinaryenStore8LaneVec128() BinaryenOp;
pub extern fn BinaryenStore16LaneVec128() BinaryenOp;
pub extern fn BinaryenStore32LaneVec128() BinaryenOp;
pub extern fn BinaryenStore64LaneVec128() BinaryenOp;
pub extern fn BinaryenNarrowSVecI16x8ToVecI8x16() BinaryenOp;
pub extern fn BinaryenNarrowUVecI16x8ToVecI8x16() BinaryenOp;
pub extern fn BinaryenNarrowSVecI32x4ToVecI16x8() BinaryenOp;
pub extern fn BinaryenNarrowUVecI32x4ToVecI16x8() BinaryenOp;
pub extern fn BinaryenExtendLowSVecI8x16ToVecI16x8() BinaryenOp;
pub extern fn BinaryenExtendHighSVecI8x16ToVecI16x8() BinaryenOp;
pub extern fn BinaryenExtendLowUVecI8x16ToVecI16x8() BinaryenOp;
pub extern fn BinaryenExtendHighUVecI8x16ToVecI16x8() BinaryenOp;
pub extern fn BinaryenExtendLowSVecI16x8ToVecI32x4() BinaryenOp;
pub extern fn BinaryenExtendHighSVecI16x8ToVecI32x4() BinaryenOp;
pub extern fn BinaryenExtendLowUVecI16x8ToVecI32x4() BinaryenOp;
pub extern fn BinaryenExtendHighUVecI16x8ToVecI32x4() BinaryenOp;
pub extern fn BinaryenExtendLowSVecI32x4ToVecI64x2() BinaryenOp;
pub extern fn BinaryenExtendHighSVecI32x4ToVecI64x2() BinaryenOp;
pub extern fn BinaryenExtendLowUVecI32x4ToVecI64x2() BinaryenOp;
pub extern fn BinaryenExtendHighUVecI32x4ToVecI64x2() BinaryenOp;
pub extern fn BinaryenConvertLowSVecI32x4ToVecF64x2() BinaryenOp;
pub extern fn BinaryenConvertLowUVecI32x4ToVecF64x2() BinaryenOp;
pub extern fn BinaryenTruncSatZeroSVecF64x2ToVecI32x4() BinaryenOp;
pub extern fn BinaryenTruncSatZeroUVecF64x2ToVecI32x4() BinaryenOp;
pub extern fn BinaryenDemoteZeroVecF64x2ToVecF32x4() BinaryenOp;
pub extern fn BinaryenPromoteLowVecF32x4ToVecF64x2() BinaryenOp;
pub extern fn BinaryenSwizzleVecI8x16() BinaryenOp;
pub extern fn BinaryenRefIsNull() BinaryenOp;
pub extern fn BinaryenRefIsFunc() BinaryenOp;
pub extern fn BinaryenRefIsData() BinaryenOp;
pub extern fn BinaryenRefIsI31() BinaryenOp;
pub extern fn BinaryenRefAsNonNull() BinaryenOp;
pub extern fn BinaryenRefAsFunc() BinaryenOp;
pub extern fn BinaryenRefAsData() BinaryenOp;
pub extern fn BinaryenRefAsI31() BinaryenOp;
pub extern fn BinaryenRefAsExternInternalize() BinaryenOp;
pub extern fn BinaryenRefAsExternExternalize() BinaryenOp;
pub extern fn BinaryenBrOnNull() BinaryenOp;
pub extern fn BinaryenBrOnNonNull() BinaryenOp;
pub extern fn BinaryenBrOnCast() BinaryenOp;
pub extern fn BinaryenBrOnCastFail() BinaryenOp;
pub extern fn BinaryenBrOnFunc() BinaryenOp;
pub extern fn BinaryenBrOnNonFunc() BinaryenOp;
pub extern fn BinaryenBrOnData() BinaryenOp;
pub extern fn BinaryenBrOnNonData() BinaryenOp;
pub extern fn BinaryenBrOnI31() BinaryenOp;
pub extern fn BinaryenBrOnNonI31() BinaryenOp;
pub extern fn BinaryenStringNewUTF8() BinaryenOp;
pub extern fn BinaryenStringNewWTF8() BinaryenOp;
pub extern fn BinaryenStringNewReplace() BinaryenOp;
pub extern fn BinaryenStringNewWTF16() BinaryenOp;
pub extern fn BinaryenStringNewUTF8Array() BinaryenOp;
pub extern fn BinaryenStringNewWTF8Array() BinaryenOp;
pub extern fn BinaryenStringNewReplaceArray() BinaryenOp;
pub extern fn BinaryenStringNewWTF16Array() BinaryenOp;
pub extern fn BinaryenStringMeasureUTF8() BinaryenOp;
pub extern fn BinaryenStringMeasureWTF8() BinaryenOp;
pub extern fn BinaryenStringMeasureWTF16() BinaryenOp;
pub extern fn BinaryenStringMeasureIsUSV() BinaryenOp;
pub extern fn BinaryenStringMeasureWTF16View() BinaryenOp;
pub extern fn BinaryenStringEncodeUTF8() BinaryenOp;
pub extern fn BinaryenStringEncodeWTF8() BinaryenOp;
pub extern fn BinaryenStringEncodeWTF16() BinaryenOp;
pub extern fn BinaryenStringEncodeUTF8Array() BinaryenOp;
pub extern fn BinaryenStringEncodeWTF8Array() BinaryenOp;
pub extern fn BinaryenStringEncodeWTF16Array() BinaryenOp;
pub extern fn BinaryenStringAsWTF8() BinaryenOp;
pub extern fn BinaryenStringAsWTF16() BinaryenOp;
pub extern fn BinaryenStringAsIter() BinaryenOp;
pub extern fn BinaryenStringIterMoveAdvance() BinaryenOp;
pub extern fn BinaryenStringIterMoveRewind() BinaryenOp;
pub extern fn BinaryenStringSliceWTF8() BinaryenOp;
pub extern fn BinaryenStringSliceWTF16() BinaryenOp;
pub const struct_BinaryenExpression = opaque {};
pub const BinaryenExpressionRef = ?*struct_BinaryenExpression;
pub extern fn BinaryenBlock(module: BinaryenModuleRef, name: [*c]const u8, children: [*c]BinaryenExpressionRef, numChildren: BinaryenIndex, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenIf(module: BinaryenModuleRef, condition: BinaryenExpressionRef, ifTrue: BinaryenExpressionRef, ifFalse: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLoop(module: BinaryenModuleRef, in: [*c]const u8, body: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBreak(module: BinaryenModuleRef, name: [*c]const u8, condition: BinaryenExpressionRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSwitch(module: BinaryenModuleRef, names: [*c][*c]const u8, numNames: BinaryenIndex, defaultName: [*c]const u8, condition: BinaryenExpressionRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenCall(module: BinaryenModuleRef, target: [*c]const u8, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex, returnType: BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenCallIndirect(module: BinaryenModuleRef, table: [*c]const u8, target: BinaryenExpressionRef, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex, params: BinaryenType, results: BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenReturnCall(module: BinaryenModuleRef, target: [*c]const u8, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex, returnType: BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenReturnCallIndirect(module: BinaryenModuleRef, table: [*c]const u8, target: BinaryenExpressionRef, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex, params: BinaryenType, results: BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenLocalGet(module: BinaryenModuleRef, index: BinaryenIndex, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenLocalSet(module: BinaryenModuleRef, index: BinaryenIndex, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLocalTee(module: BinaryenModuleRef, index: BinaryenIndex, value: BinaryenExpressionRef, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenGlobalGet(module: BinaryenModuleRef, name: [*c]const u8, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenGlobalSet(module: BinaryenModuleRef, name: [*c]const u8, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLoad(module: BinaryenModuleRef, bytes: u32, signed_: bool, offset: u32, @"align": u32, @"type": BinaryenType, ptr: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenStore(module: BinaryenModuleRef, bytes: u32, offset: u32, @"align": u32, ptr: BinaryenExpressionRef, value: BinaryenExpressionRef, @"type": BinaryenType, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenConst(module: BinaryenModuleRef, value: struct_BinaryenLiteral) BinaryenExpressionRef;
pub extern fn BinaryenUnary(module: BinaryenModuleRef, op: BinaryenOp, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBinary(module: BinaryenModuleRef, op: BinaryenOp, left: BinaryenExpressionRef, right: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSelect(module: BinaryenModuleRef, condition: BinaryenExpressionRef, ifTrue: BinaryenExpressionRef, ifFalse: BinaryenExpressionRef, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenDrop(module: BinaryenModuleRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenReturn(module: BinaryenModuleRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemorySize(module: BinaryenModuleRef, memoryName: [*c]const u8, memoryIs64: bool) BinaryenExpressionRef;
pub extern fn BinaryenMemoryGrow(module: BinaryenModuleRef, delta: BinaryenExpressionRef, memoryName: [*c]const u8, memoryIs64: bool) BinaryenExpressionRef;
pub extern fn BinaryenNop(module: BinaryenModuleRef) BinaryenExpressionRef;
pub extern fn BinaryenUnreachable(module: BinaryenModuleRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicLoad(module: BinaryenModuleRef, bytes: u32, offset: u32, @"type": BinaryenType, ptr: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicStore(module: BinaryenModuleRef, bytes: u32, offset: u32, ptr: BinaryenExpressionRef, value: BinaryenExpressionRef, @"type": BinaryenType, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicRMW(module: BinaryenModuleRef, op: BinaryenOp, bytes: BinaryenIndex, offset: BinaryenIndex, ptr: BinaryenExpressionRef, value: BinaryenExpressionRef, @"type": BinaryenType, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicCmpxchg(module: BinaryenModuleRef, bytes: BinaryenIndex, offset: BinaryenIndex, ptr: BinaryenExpressionRef, expected: BinaryenExpressionRef, replacement: BinaryenExpressionRef, @"type": BinaryenType, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicWait(module: BinaryenModuleRef, ptr: BinaryenExpressionRef, expected: BinaryenExpressionRef, timeout: BinaryenExpressionRef, @"type": BinaryenType, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicNotify(module: BinaryenModuleRef, ptr: BinaryenExpressionRef, notifyCount: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenAtomicFence(module: BinaryenModuleRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDExtract(module: BinaryenModuleRef, op: BinaryenOp, vec: BinaryenExpressionRef, index: u8) BinaryenExpressionRef;
pub extern fn BinaryenSIMDReplace(module: BinaryenModuleRef, op: BinaryenOp, vec: BinaryenExpressionRef, index: u8, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShuffle(module: BinaryenModuleRef, left: BinaryenExpressionRef, right: BinaryenExpressionRef, mask: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenSIMDTernary(module: BinaryenModuleRef, op: BinaryenOp, a: BinaryenExpressionRef, b: BinaryenExpressionRef, c: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShift(module: BinaryenModuleRef, op: BinaryenOp, vec: BinaryenExpressionRef, shift: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDLoad(module: BinaryenModuleRef, op: BinaryenOp, offset: u32, @"align": u32, ptr: BinaryenExpressionRef, name: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenSIMDLoadStoreLane(module: BinaryenModuleRef, op: BinaryenOp, offset: u32, @"align": u32, index: u8, ptr: BinaryenExpressionRef, vec: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenMemoryInit(module: BinaryenModuleRef, segment: u32, dest: BinaryenExpressionRef, offset: BinaryenExpressionRef, size: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenDataDrop(module: BinaryenModuleRef, segment: u32) BinaryenExpressionRef;
pub extern fn BinaryenMemoryCopy(module: BinaryenModuleRef, dest: BinaryenExpressionRef, source: BinaryenExpressionRef, size: BinaryenExpressionRef, destMemory: [*c]const u8, sourceMemory: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenMemoryFill(module: BinaryenModuleRef, dest: BinaryenExpressionRef, value: BinaryenExpressionRef, size: BinaryenExpressionRef, memoryName: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenRefNull(module: BinaryenModuleRef, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenRefIs(module: BinaryenModuleRef, op: BinaryenOp, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefAs(module: BinaryenModuleRef, op: BinaryenOp, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefFunc(module: BinaryenModuleRef, func: [*c]const u8, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenRefEq(module: BinaryenModuleRef, left: BinaryenExpressionRef, right: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableGet(module: BinaryenModuleRef, name: [*c]const u8, index: BinaryenExpressionRef, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenTableSet(module: BinaryenModuleRef, name: [*c]const u8, index: BinaryenExpressionRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableSize(module: BinaryenModuleRef, name: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenTableGrow(module: BinaryenModuleRef, name: [*c]const u8, value: BinaryenExpressionRef, delta: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTry(module: BinaryenModuleRef, name: [*c]const u8, body: BinaryenExpressionRef, catchTags: [*c][*c]const u8, numCatchTags: BinaryenIndex, catchBodies: [*c]BinaryenExpressionRef, numCatchBodies: BinaryenIndex, delegateTarget: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenThrow(module: BinaryenModuleRef, tag: [*c]const u8, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenRethrow(module: BinaryenModuleRef, target: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenTupleMake(module: BinaryenModuleRef, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenTupleExtract(module: BinaryenModuleRef, tuple: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenPop(module: BinaryenModuleRef, @"type": BinaryenType) BinaryenExpressionRef;
pub extern fn BinaryenI31New(module: BinaryenModuleRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenI31Get(module: BinaryenModuleRef, @"i31": BinaryenExpressionRef, signed_: bool) BinaryenExpressionRef;
pub extern fn BinaryenRefTest(module: BinaryenModuleRef, ref: BinaryenExpressionRef, intendedType: BinaryenHeapType) BinaryenExpressionRef;
pub extern fn BinaryenRefCast(module: BinaryenModuleRef, ref: BinaryenExpressionRef, intendedType: BinaryenHeapType) BinaryenExpressionRef;
pub extern fn BinaryenBrOn(module: BinaryenModuleRef, op: BinaryenOp, name: [*c]const u8, ref: BinaryenExpressionRef, intendedType: BinaryenHeapType) BinaryenExpressionRef;
pub extern fn BinaryenStructNew(module: BinaryenModuleRef, operands: [*c]BinaryenExpressionRef, numOperands: BinaryenIndex, @"type": BinaryenHeapType) BinaryenExpressionRef;
pub extern fn BinaryenStructGet(module: BinaryenModuleRef, index: BinaryenIndex, ref: BinaryenExpressionRef, @"type": BinaryenType, signed_: bool) BinaryenExpressionRef;
pub extern fn BinaryenStructSet(module: BinaryenModuleRef, index: BinaryenIndex, ref: BinaryenExpressionRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenArrayNew(module: BinaryenModuleRef, @"type": BinaryenHeapType, size: BinaryenExpressionRef, init: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenArrayInit(module: BinaryenModuleRef, @"type": BinaryenHeapType, values: [*c]BinaryenExpressionRef, numValues: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenArrayGet(module: BinaryenModuleRef, ref: BinaryenExpressionRef, index: BinaryenExpressionRef, signed_: bool) BinaryenExpressionRef;
pub extern fn BinaryenArraySet(module: BinaryenModuleRef, ref: BinaryenExpressionRef, index: BinaryenExpressionRef, value: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenArrayLen(module: BinaryenModuleRef, ref: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenArrayCopy(module: BinaryenModuleRef, destRef: BinaryenExpressionRef, destIndex: BinaryenExpressionRef, srcRef: BinaryenExpressionRef, srcIndex: BinaryenExpressionRef, length: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringNew(module: BinaryenModuleRef, op: BinaryenOp, ptr: BinaryenExpressionRef, length: BinaryenExpressionRef, start: BinaryenExpressionRef, end: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringConst(module: BinaryenModuleRef, name: [*c]const u8) BinaryenExpressionRef;
pub extern fn BinaryenStringMeasure(module: BinaryenModuleRef, op: BinaryenOp, ref: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringEncode(module: BinaryenModuleRef, op: BinaryenOp, ref: BinaryenExpressionRef, ptr: BinaryenExpressionRef, start: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringConcat(module: BinaryenModuleRef, left: BinaryenExpressionRef, right: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringEq(module: BinaryenModuleRef, left: BinaryenExpressionRef, right: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringAs(module: BinaryenModuleRef, op: BinaryenOp, ref: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringWTF8Advance(module: BinaryenModuleRef, ref: BinaryenExpressionRef, pos: BinaryenExpressionRef, bytes: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringWTF16Get(module: BinaryenModuleRef, ref: BinaryenExpressionRef, pos: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringIterNext(module: BinaryenModuleRef, ref: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringIterMove(module: BinaryenModuleRef, op: BinaryenOp, ref: BinaryenExpressionRef, num: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringSliceWTF(module: BinaryenModuleRef, op: BinaryenOp, ref: BinaryenExpressionRef, start: BinaryenExpressionRef, end: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStringSliceIter(module: BinaryenModuleRef, ref: BinaryenExpressionRef, num: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenExpressionGetId(expr: BinaryenExpressionRef) BinaryenExpressionId;
pub extern fn BinaryenExpressionGetType(expr: BinaryenExpressionRef) BinaryenType;
pub extern fn BinaryenExpressionSetType(expr: BinaryenExpressionRef, @"type": BinaryenType) void;
pub extern fn BinaryenExpressionPrint(expr: BinaryenExpressionRef) void;
pub extern fn BinaryenExpressionFinalize(expr: BinaryenExpressionRef) void;
pub extern fn BinaryenExpressionCopy(expr: BinaryenExpressionRef, module: BinaryenModuleRef) BinaryenExpressionRef;
pub extern fn BinaryenBlockGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenBlockSetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenBlockGetNumChildren(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenBlockGetChildAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenBlockSetChildAt(expr: BinaryenExpressionRef, index: BinaryenIndex, childExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBlockAppendChild(expr: BinaryenExpressionRef, childExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenBlockInsertChildAt(expr: BinaryenExpressionRef, index: BinaryenIndex, childExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBlockRemoveChildAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenIfGetCondition(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenIfSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenIfGetIfTrue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenIfSetIfTrue(expr: BinaryenExpressionRef, ifTrueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenIfGetIfFalse(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenIfSetIfFalse(expr: BinaryenExpressionRef, ifFalseExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenLoopGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenLoopSetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenLoopGetBody(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLoopSetBody(expr: BinaryenExpressionRef, bodyExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBreakGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenBreakSetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenBreakGetCondition(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBreakSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBreakGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBreakSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSwitchGetNumNames(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenSwitchGetNameAt(expr: BinaryenExpressionRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenSwitchSetNameAt(expr: BinaryenExpressionRef, index: BinaryenIndex, name: [*c]const u8) void;
pub extern fn BinaryenSwitchAppendName(expr: BinaryenExpressionRef, name: [*c]const u8) BinaryenIndex;
pub extern fn BinaryenSwitchInsertNameAt(expr: BinaryenExpressionRef, index: BinaryenIndex, name: [*c]const u8) void;
pub extern fn BinaryenSwitchRemoveNameAt(expr: BinaryenExpressionRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenSwitchGetDefaultName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenSwitchSetDefaultName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenSwitchGetCondition(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSwitchSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSwitchGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSwitchSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallGetTarget(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenCallSetTarget(expr: BinaryenExpressionRef, target: [*c]const u8) void;
pub extern fn BinaryenCallGetNumOperands(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenCallGetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenCallSetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallAppendOperand(expr: BinaryenExpressionRef, operandExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenCallInsertOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallRemoveOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenCallIsReturn(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenCallSetReturn(expr: BinaryenExpressionRef, isReturn: bool) void;
pub extern fn BinaryenCallIndirectGetTarget(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenCallIndirectSetTarget(expr: BinaryenExpressionRef, targetExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallIndirectGetTable(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenCallIndirectSetTable(expr: BinaryenExpressionRef, table: [*c]const u8) void;
pub extern fn BinaryenCallIndirectGetNumOperands(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenCallIndirectGetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenCallIndirectSetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallIndirectAppendOperand(expr: BinaryenExpressionRef, operandExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenCallIndirectInsertOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenCallIndirectRemoveOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenCallIndirectIsReturn(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenCallIndirectSetReturn(expr: BinaryenExpressionRef, isReturn: bool) void;
pub extern fn BinaryenCallIndirectGetParams(expr: BinaryenExpressionRef) BinaryenType;
pub extern fn BinaryenCallIndirectSetParams(expr: BinaryenExpressionRef, params: BinaryenType) void;
pub extern fn BinaryenCallIndirectGetResults(expr: BinaryenExpressionRef) BinaryenType;
pub extern fn BinaryenCallIndirectSetResults(expr: BinaryenExpressionRef, params: BinaryenType) void;
pub extern fn BinaryenLocalGetGetIndex(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenLocalGetSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex) void;
pub extern fn BinaryenLocalSetIsTee(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenLocalSetGetIndex(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenLocalSetSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex) void;
pub extern fn BinaryenLocalSetGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLocalSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenGlobalGetGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenGlobalGetSetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenGlobalSetGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenGlobalSetSetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenGlobalSetGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenGlobalSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTableGetGetTable(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTableGetSetTable(expr: BinaryenExpressionRef, table: [*c]const u8) void;
pub extern fn BinaryenTableGetGetIndex(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableGetSetIndex(expr: BinaryenExpressionRef, indexExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTableSetGetTable(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTableSetSetTable(expr: BinaryenExpressionRef, table: [*c]const u8) void;
pub extern fn BinaryenTableSetGetIndex(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableSetSetIndex(expr: BinaryenExpressionRef, indexExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTableSetGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTableSizeGetTable(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTableSizeSetTable(expr: BinaryenExpressionRef, table: [*c]const u8) void;
pub extern fn BinaryenTableGrowGetTable(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTableGrowSetTable(expr: BinaryenExpressionRef, table: [*c]const u8) void;
pub extern fn BinaryenTableGrowGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableGrowSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTableGrowGetDelta(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTableGrowSetDelta(expr: BinaryenExpressionRef, deltaExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryGrowGetDelta(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryGrowSetDelta(expr: BinaryenExpressionRef, deltaExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenLoadIsAtomic(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenLoadSetAtomic(expr: BinaryenExpressionRef, isAtomic: bool) void;
pub extern fn BinaryenLoadIsSigned(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenLoadSetSigned(expr: BinaryenExpressionRef, isSigned: bool) void;
pub extern fn BinaryenLoadGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenLoadSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenLoadGetBytes(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenLoadSetBytes(expr: BinaryenExpressionRef, bytes: u32) void;
pub extern fn BinaryenLoadGetAlign(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenLoadSetAlign(expr: BinaryenExpressionRef, @"align": u32) void;
pub extern fn BinaryenLoadGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenLoadSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenStoreIsAtomic(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenStoreSetAtomic(expr: BinaryenExpressionRef, isAtomic: bool) void;
pub extern fn BinaryenStoreGetBytes(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenStoreSetBytes(expr: BinaryenExpressionRef, bytes: u32) void;
pub extern fn BinaryenStoreGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenStoreSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenStoreGetAlign(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenStoreSetAlign(expr: BinaryenExpressionRef, @"align": u32) void;
pub extern fn BinaryenStoreGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStoreSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenStoreGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenStoreSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenStoreGetValueType(expr: BinaryenExpressionRef) BinaryenType;
pub extern fn BinaryenStoreSetValueType(expr: BinaryenExpressionRef, valueType: BinaryenType) void;
pub extern fn BinaryenConstGetValueI32(expr: BinaryenExpressionRef) i32;
pub extern fn BinaryenConstSetValueI32(expr: BinaryenExpressionRef, value: i32) void;
pub extern fn BinaryenConstGetValueI64(expr: BinaryenExpressionRef) i64;
pub extern fn BinaryenConstSetValueI64(expr: BinaryenExpressionRef, value: i64) void;
pub extern fn BinaryenConstGetValueI64Low(expr: BinaryenExpressionRef) i32;
pub extern fn BinaryenConstSetValueI64Low(expr: BinaryenExpressionRef, valueLow: i32) void;
pub extern fn BinaryenConstGetValueI64High(expr: BinaryenExpressionRef) i32;
pub extern fn BinaryenConstSetValueI64High(expr: BinaryenExpressionRef, valueHigh: i32) void;
pub extern fn BinaryenConstGetValueF32(expr: BinaryenExpressionRef) f32;
pub extern fn BinaryenConstSetValueF32(expr: BinaryenExpressionRef, value: f32) void;
pub extern fn BinaryenConstGetValueF64(expr: BinaryenExpressionRef) f64;
pub extern fn BinaryenConstSetValueF64(expr: BinaryenExpressionRef, value: f64) void;
pub extern fn BinaryenConstGetValueV128(expr: BinaryenExpressionRef, out: [*c]u8) void;
pub extern fn BinaryenConstSetValueV128(expr: BinaryenExpressionRef, value: [*c]const u8) void;
pub extern fn BinaryenUnaryGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenUnarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenUnaryGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenUnarySetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBinaryGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenBinarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenBinaryGetLeft(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBinarySetLeft(expr: BinaryenExpressionRef, leftExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenBinaryGetRight(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenBinarySetRight(expr: BinaryenExpressionRef, rightExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSelectGetIfTrue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSelectSetIfTrue(expr: BinaryenExpressionRef, ifTrueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSelectGetIfFalse(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSelectSetIfFalse(expr: BinaryenExpressionRef, ifFalseExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSelectGetCondition(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSelectSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenDropGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenDropSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenReturnGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenReturnSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicRMWGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenAtomicRMWSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenAtomicRMWGetBytes(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenAtomicRMWSetBytes(expr: BinaryenExpressionRef, bytes: u32) void;
pub extern fn BinaryenAtomicRMWGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenAtomicRMWSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenAtomicRMWGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicRMWSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicRMWGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicRMWSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicCmpxchgGetBytes(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenAtomicCmpxchgSetBytes(expr: BinaryenExpressionRef, bytes: u32) void;
pub extern fn BinaryenAtomicCmpxchgGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenAtomicCmpxchgSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenAtomicCmpxchgGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicCmpxchgSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicCmpxchgGetExpected(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicCmpxchgSetExpected(expr: BinaryenExpressionRef, expectedExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicCmpxchgGetReplacement(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicCmpxchgSetReplacement(expr: BinaryenExpressionRef, replacementExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicWaitGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicWaitSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicWaitGetExpected(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicWaitSetExpected(expr: BinaryenExpressionRef, expectedExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicWaitGetTimeout(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicWaitSetTimeout(expr: BinaryenExpressionRef, timeoutExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicWaitGetExpectedType(expr: BinaryenExpressionRef) BinaryenType;
pub extern fn BinaryenAtomicWaitSetExpectedType(expr: BinaryenExpressionRef, expectedType: BinaryenType) void;
pub extern fn BinaryenAtomicNotifyGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicNotifySetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicNotifyGetNotifyCount(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenAtomicNotifySetNotifyCount(expr: BinaryenExpressionRef, notifyCountExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenAtomicFenceGetOrder(expr: BinaryenExpressionRef) u8;
pub extern fn BinaryenAtomicFenceSetOrder(expr: BinaryenExpressionRef, order: u8) void;
pub extern fn BinaryenSIMDExtractGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDExtractSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDExtractGetVec(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDExtractSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDExtractGetIndex(expr: BinaryenExpressionRef) u8;
pub extern fn BinaryenSIMDExtractSetIndex(expr: BinaryenExpressionRef, index: u8) void;
pub extern fn BinaryenSIMDReplaceGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDReplaceSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDReplaceGetVec(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDReplaceSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDReplaceGetIndex(expr: BinaryenExpressionRef) u8;
pub extern fn BinaryenSIMDReplaceSetIndex(expr: BinaryenExpressionRef, index: u8) void;
pub extern fn BinaryenSIMDReplaceGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDReplaceSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDShuffleGetLeft(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShuffleSetLeft(expr: BinaryenExpressionRef, leftExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDShuffleGetRight(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShuffleSetRight(expr: BinaryenExpressionRef, rightExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDShuffleGetMask(expr: BinaryenExpressionRef, mask: [*c]u8) void;
pub extern fn BinaryenSIMDShuffleSetMask(expr: BinaryenExpressionRef, mask: [*c]const u8) void;
pub extern fn BinaryenSIMDTernaryGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDTernarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDTernaryGetA(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDTernarySetA(expr: BinaryenExpressionRef, aExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDTernaryGetB(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDTernarySetB(expr: BinaryenExpressionRef, bExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDTernaryGetC(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDTernarySetC(expr: BinaryenExpressionRef, cExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDShiftGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDShiftSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDShiftGetVec(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShiftSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDShiftGetShift(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDShiftSetShift(expr: BinaryenExpressionRef, shiftExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDLoadGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDLoadSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDLoadGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenSIMDLoadSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenSIMDLoadGetAlign(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenSIMDLoadSetAlign(expr: BinaryenExpressionRef, @"align": u32) void;
pub extern fn BinaryenSIMDLoadGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDLoadSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenSIMDLoadStoreLaneSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetOffset(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenSIMDLoadStoreLaneSetOffset(expr: BinaryenExpressionRef, offset: u32) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetAlign(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenSIMDLoadStoreLaneSetAlign(expr: BinaryenExpressionRef, @"align": u32) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetIndex(expr: BinaryenExpressionRef) u8;
pub extern fn BinaryenSIMDLoadStoreLaneSetIndex(expr: BinaryenExpressionRef, index: u8) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetPtr(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDLoadStoreLaneSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDLoadStoreLaneGetVec(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenSIMDLoadStoreLaneSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenSIMDLoadStoreLaneIsStore(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenMemoryInitGetSegment(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenMemoryInitSetSegment(expr: BinaryenExpressionRef, segmentIndex: u32) void;
pub extern fn BinaryenMemoryInitGetDest(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryInitSetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryInitGetOffset(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryInitSetOffset(expr: BinaryenExpressionRef, offsetExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryInitGetSize(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryInitSetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenDataDropGetSegment(expr: BinaryenExpressionRef) u32;
pub extern fn BinaryenDataDropSetSegment(expr: BinaryenExpressionRef, segmentIndex: u32) void;
pub extern fn BinaryenMemoryCopyGetDest(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryCopySetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryCopyGetSource(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryCopySetSource(expr: BinaryenExpressionRef, sourceExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryCopyGetSize(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryCopySetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryFillGetDest(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryFillSetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryFillGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryFillSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenMemoryFillGetSize(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenMemoryFillSetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenRefIsGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenRefIsSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenRefIsGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefIsSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenRefAsGetOp(expr: BinaryenExpressionRef) BinaryenOp;
pub extern fn BinaryenRefAsSetOp(expr: BinaryenExpressionRef, op: BinaryenOp) void;
pub extern fn BinaryenRefAsGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefAsSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenRefFuncGetFunc(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenRefFuncSetFunc(expr: BinaryenExpressionRef, funcName: [*c]const u8) void;
pub extern fn BinaryenRefEqGetLeft(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefEqSetLeft(expr: BinaryenExpressionRef, left: BinaryenExpressionRef) void;
pub extern fn BinaryenRefEqGetRight(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenRefEqSetRight(expr: BinaryenExpressionRef, right: BinaryenExpressionRef) void;
pub extern fn BinaryenTryGetName(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTrySetName(expr: BinaryenExpressionRef, name: [*c]const u8) void;
pub extern fn BinaryenTryGetBody(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTrySetBody(expr: BinaryenExpressionRef, bodyExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTryGetNumCatchTags(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTryGetNumCatchBodies(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTryGetCatchTagAt(expr: BinaryenExpressionRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenTrySetCatchTagAt(expr: BinaryenExpressionRef, index: BinaryenIndex, catchTag: [*c]const u8) void;
pub extern fn BinaryenTryAppendCatchTag(expr: BinaryenExpressionRef, catchTag: [*c]const u8) BinaryenIndex;
pub extern fn BinaryenTryInsertCatchTagAt(expr: BinaryenExpressionRef, index: BinaryenIndex, catchTag: [*c]const u8) void;
pub extern fn BinaryenTryRemoveCatchTagAt(expr: BinaryenExpressionRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenTryGetCatchBodyAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenTrySetCatchBodyAt(expr: BinaryenExpressionRef, index: BinaryenIndex, catchExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTryAppendCatchBody(expr: BinaryenExpressionRef, catchExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTryInsertCatchBodyAt(expr: BinaryenExpressionRef, index: BinaryenIndex, catchExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTryRemoveCatchBodyAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenTryHasCatchAll(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenTryGetDelegateTarget(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenTrySetDelegateTarget(expr: BinaryenExpressionRef, delegateTarget: [*c]const u8) void;
pub extern fn BinaryenTryIsDelegate(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenThrowGetTag(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenThrowSetTag(expr: BinaryenExpressionRef, tagName: [*c]const u8) void;
pub extern fn BinaryenThrowGetNumOperands(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenThrowGetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenThrowSetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenThrowAppendOperand(expr: BinaryenExpressionRef, operandExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenThrowInsertOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenThrowRemoveOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenRethrowGetTarget(expr: BinaryenExpressionRef) [*c]const u8;
pub extern fn BinaryenRethrowSetTarget(expr: BinaryenExpressionRef, target: [*c]const u8) void;
pub extern fn BinaryenTupleMakeGetNumOperands(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTupleMakeGetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenTupleMakeSetOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTupleMakeAppendOperand(expr: BinaryenExpressionRef, operandExpr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTupleMakeInsertOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex, operandExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTupleMakeRemoveOperandAt(expr: BinaryenExpressionRef, index: BinaryenIndex) BinaryenExpressionRef;
pub extern fn BinaryenTupleExtractGetTuple(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenTupleExtractSetTuple(expr: BinaryenExpressionRef, tupleExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenTupleExtractGetIndex(expr: BinaryenExpressionRef) BinaryenIndex;
pub extern fn BinaryenTupleExtractSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex) void;
pub extern fn BinaryenI31NewGetValue(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenI31NewSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef) void;
pub extern fn BinaryenI31GetGetI31(expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub extern fn BinaryenI31GetSetI31(expr: BinaryenExpressionRef, i31Expr: BinaryenExpressionRef) void;
pub extern fn BinaryenI31GetIsSigned(expr: BinaryenExpressionRef) bool;
pub extern fn BinaryenI31GetSetSigned(expr: BinaryenExpressionRef, signed_: bool) void;
pub const struct_BinaryenFunction = opaque {};
pub const BinaryenFunctionRef = ?*struct_BinaryenFunction;
pub extern fn BinaryenAddFunction(module: BinaryenModuleRef, name: [*c]const u8, params: BinaryenType, results: BinaryenType, varTypes: [*c]BinaryenType, numVarTypes: BinaryenIndex, body: BinaryenExpressionRef) BinaryenFunctionRef;
pub extern fn BinaryenGetFunction(module: BinaryenModuleRef, name: [*c]const u8) BinaryenFunctionRef;
pub extern fn BinaryenRemoveFunction(module: BinaryenModuleRef, name: [*c]const u8) void;
pub extern fn BinaryenGetNumFunctions(module: BinaryenModuleRef) BinaryenIndex;
pub extern fn BinaryenGetFunctionByIndex(module: BinaryenModuleRef, index: BinaryenIndex) BinaryenFunctionRef;
pub extern fn BinaryenAddFunctionImport(module: BinaryenModuleRef, internalName: [*c]const u8, externalModuleName: [*c]const u8, externalBaseName: [*c]const u8, params: BinaryenType, results: BinaryenType) void;
pub extern fn BinaryenAddTableImport(module: BinaryenModuleRef, internalName: [*c]const u8, externalModuleName: [*c]const u8, externalBaseName: [*c]const u8) void;
pub extern fn BinaryenAddMemoryImport(module: BinaryenModuleRef, internalName: [*c]const u8, externalModuleName: [*c]const u8, externalBaseName: [*c]const u8, shared: u8) void;
pub extern fn BinaryenAddGlobalImport(module: BinaryenModuleRef, internalName: [*c]const u8, externalModuleName: [*c]const u8, externalBaseName: [*c]const u8, globalType: BinaryenType, mutable_: bool) void;
pub extern fn BinaryenAddTagImport(module: BinaryenModuleRef, internalName: [*c]const u8, externalModuleName: [*c]const u8, externalBaseName: [*c]const u8, params: BinaryenType, results: BinaryenType) void;
pub const struct_BinaryenMemory = opaque {};
pub const BinaryenMemoryRef = ?*struct_BinaryenMemory;
pub const struct_BinaryenExport = opaque {};
pub const BinaryenExportRef = ?*struct_BinaryenExport;
pub extern fn BinaryenAddExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenAddFunctionExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenAddTableExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenAddMemoryExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenAddGlobalExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenAddTagExport(module: BinaryenModuleRef, internalName: [*c]const u8, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenGetExport(module: BinaryenModuleRef, externalName: [*c]const u8) BinaryenExportRef;
pub extern fn BinaryenRemoveExport(module: BinaryenModuleRef, externalName: [*c]const u8) void;
pub extern fn BinaryenGetNumExports(module: BinaryenModuleRef) BinaryenIndex;
pub extern fn BinaryenGetExportByIndex(module: BinaryenModuleRef, index: BinaryenIndex) BinaryenExportRef;
pub const struct_BinaryenGlobal = opaque {};
pub const BinaryenGlobalRef = ?*struct_BinaryenGlobal;
pub extern fn BinaryenAddGlobal(module: BinaryenModuleRef, name: [*c]const u8, @"type": BinaryenType, mutable_: bool, init: BinaryenExpressionRef) BinaryenGlobalRef;
pub extern fn BinaryenGetGlobal(module: BinaryenModuleRef, name: [*c]const u8) BinaryenGlobalRef;
pub extern fn BinaryenRemoveGlobal(module: BinaryenModuleRef, name: [*c]const u8) void;
pub extern fn BinaryenGetNumGlobals(module: BinaryenModuleRef) BinaryenIndex;
pub extern fn BinaryenGetGlobalByIndex(module: BinaryenModuleRef, index: BinaryenIndex) BinaryenGlobalRef;
pub const struct_BinaryenTag = opaque {};
pub const BinaryenTagRef = ?*struct_BinaryenTag;
pub extern fn BinaryenAddTag(module: BinaryenModuleRef, name: [*c]const u8, params: BinaryenType, results: BinaryenType) BinaryenTagRef;
pub extern fn BinaryenGetTag(module: BinaryenModuleRef, name: [*c]const u8) BinaryenTagRef;
pub extern fn BinaryenRemoveTag(module: BinaryenModuleRef, name: [*c]const u8) void;
pub const struct_BinaryenTable = opaque {};
pub const BinaryenTableRef = ?*struct_BinaryenTable;
pub extern fn BinaryenAddTable(module: BinaryenModuleRef, table: [*c]const u8, initial: BinaryenIndex, maximum: BinaryenIndex, tableType: BinaryenType) BinaryenTableRef;
pub extern fn BinaryenRemoveTable(module: BinaryenModuleRef, table: [*c]const u8) void;
pub extern fn BinaryenGetNumTables(module: BinaryenModuleRef) BinaryenIndex;
pub extern fn BinaryenGetTable(module: BinaryenModuleRef, name: [*c]const u8) BinaryenTableRef;
pub extern fn BinaryenGetTableByIndex(module: BinaryenModuleRef, index: BinaryenIndex) BinaryenTableRef;
pub const struct_BinaryenElementSegment = opaque {};
pub const BinaryenElementSegmentRef = ?*struct_BinaryenElementSegment;
pub extern fn BinaryenAddActiveElementSegment(module: BinaryenModuleRef, table: [*c]const u8, name: [*c]const u8, funcNames: [*c][*c]const u8, numFuncNames: BinaryenIndex, offset: BinaryenExpressionRef) BinaryenElementSegmentRef;
pub extern fn BinaryenAddPassiveElementSegment(module: BinaryenModuleRef, name: [*c]const u8, funcNames: [*c][*c]const u8, numFuncNames: BinaryenIndex) BinaryenElementSegmentRef;
pub extern fn BinaryenRemoveElementSegment(module: BinaryenModuleRef, name: [*c]const u8) void;
pub extern fn BinaryenGetNumElementSegments(module: BinaryenModuleRef) BinaryenIndex;
pub extern fn BinaryenGetElementSegment(module: BinaryenModuleRef, name: [*c]const u8) BinaryenElementSegmentRef;
pub extern fn BinaryenGetElementSegmentByIndex(module: BinaryenModuleRef, index: BinaryenIndex) BinaryenElementSegmentRef;
pub extern fn BinaryenSetMemory(module: BinaryenModuleRef, initial: BinaryenIndex, maximum: BinaryenIndex, exportName: [*c]const u8, segments: [*c][*c]const u8, segmentPassive: [*c]bool, segmentOffsets: [*c]BinaryenExpressionRef, segmentSizes: [*c]BinaryenIndex, numSegments: BinaryenIndex, shared: bool, memory64: bool, name: [*c]const u8) void;
pub extern fn BinaryenHasMemory(module: BinaryenModuleRef) bool;
pub extern fn BinaryenMemoryGetInitial(module: BinaryenModuleRef, name: [*c]const u8) BinaryenIndex;
pub extern fn BinaryenMemoryHasMax(module: BinaryenModuleRef, name: [*c]const u8) bool;
pub extern fn BinaryenMemoryGetMax(module: BinaryenModuleRef, name: [*c]const u8) BinaryenIndex;
pub extern fn BinaryenMemoryImportGetModule(module: BinaryenModuleRef, name: [*c]const u8) [*c]const u8;
pub extern fn BinaryenMemoryImportGetBase(module: BinaryenModuleRef, name: [*c]const u8) [*c]const u8;
pub extern fn BinaryenMemoryIsShared(module: BinaryenModuleRef, name: [*c]const u8) bool;
pub extern fn BinaryenMemoryIs64(module: BinaryenModuleRef, name: [*c]const u8) bool;
pub extern fn BinaryenGetNumMemorySegments(module: BinaryenModuleRef) u32;
pub extern fn BinaryenGetMemorySegmentByteOffset(module: BinaryenModuleRef, id: BinaryenIndex) u32;
pub extern fn BinaryenGetMemorySegmentByteLength(module: BinaryenModuleRef, id: BinaryenIndex) usize;
pub extern fn BinaryenGetMemorySegmentPassive(module: BinaryenModuleRef, id: BinaryenIndex) bool;
pub extern fn BinaryenCopyMemorySegmentData(module: BinaryenModuleRef, id: BinaryenIndex, buffer: [*c]u8) void;
pub extern fn BinaryenSetStart(module: BinaryenModuleRef, start: BinaryenFunctionRef) void;
pub extern fn BinaryenModuleGetFeatures(module: BinaryenModuleRef) BinaryenFeatures;
pub extern fn BinaryenModuleSetFeatures(module: BinaryenModuleRef, features: BinaryenFeatures) void;
pub extern fn BinaryenModuleParse(text: [*c]const u8) BinaryenModuleRef;
pub extern fn BinaryenModulePrint(module: BinaryenModuleRef) void;
pub extern fn BinaryenModulePrintStackIR(module: BinaryenModuleRef, optimize: bool) void;
pub extern fn BinaryenModulePrintAsmjs(module: BinaryenModuleRef) void;
pub extern fn BinaryenModuleValidate(module: BinaryenModuleRef) bool;
pub extern fn BinaryenModuleOptimize(module: BinaryenModuleRef) void;
pub extern fn BinaryenModuleUpdateMaps(module: BinaryenModuleRef) void;
pub extern fn BinaryenGetOptimizeLevel() c_int;
pub extern fn BinaryenSetOptimizeLevel(level: c_int) void;
pub extern fn BinaryenGetShrinkLevel() c_int;
pub extern fn BinaryenSetShrinkLevel(level: c_int) void;
pub extern fn BinaryenGetDebugInfo() bool;
pub extern fn BinaryenSetDebugInfo(on: bool) void;
pub extern fn BinaryenGetLowMemoryUnused() bool;
pub extern fn BinaryenSetLowMemoryUnused(on: bool) void;
pub extern fn BinaryenGetZeroFilledMemory() bool;
pub extern fn BinaryenSetZeroFilledMemory(on: bool) void;
pub extern fn BinaryenGetFastMath() bool;
pub extern fn BinaryenSetFastMath(value: bool) void;
pub extern fn BinaryenGetPassArgument(name: [*c]const u8) [*c]const u8;
pub extern fn BinaryenSetPassArgument(name: [*c]const u8, value: [*c]const u8) void;
pub extern fn BinaryenClearPassArguments(...) void;
pub extern fn BinaryenGetAlwaysInlineMaxSize() BinaryenIndex;
pub extern fn BinaryenSetAlwaysInlineMaxSize(size: BinaryenIndex) void;
pub extern fn BinaryenGetFlexibleInlineMaxSize() BinaryenIndex;
pub extern fn BinaryenSetFlexibleInlineMaxSize(size: BinaryenIndex) void;
pub extern fn BinaryenGetOneCallerInlineMaxSize() BinaryenIndex;
pub extern fn BinaryenSetOneCallerInlineMaxSize(size: BinaryenIndex) void;
pub extern fn BinaryenGetAllowInliningFunctionsWithLoops() bool;
pub extern fn BinaryenSetAllowInliningFunctionsWithLoops(enabled: bool) void;
pub extern fn BinaryenModuleRunPasses(module: BinaryenModuleRef, passes: [*c][*c]const u8, numPasses: BinaryenIndex) void;
pub extern fn BinaryenModuleAutoDrop(module: BinaryenModuleRef) void;
pub extern fn BinaryenModuleWrite(module: BinaryenModuleRef, output: [*c]u8, outputSize: usize) usize;
pub extern fn BinaryenModuleWriteText(module: BinaryenModuleRef, output: [*c]u8, outputSize: usize) usize;
pub extern fn BinaryenModuleWriteStackIR(module: BinaryenModuleRef, output: [*c]u8, outputSize: usize, optimize: bool) usize;
pub const struct_BinaryenBufferSizes = extern struct {
    outputBytes: usize,
    sourceMapBytes: usize,
};
pub const BinaryenBufferSizes = struct_BinaryenBufferSizes;
pub extern fn BinaryenModuleWriteWithSourceMap(module: BinaryenModuleRef, url: [*c]const u8, output: [*c]u8, outputSize: usize, sourceMap: [*c]u8, sourceMapSize: usize) BinaryenBufferSizes;
pub const struct_BinaryenModuleAllocateAndWriteResult = extern struct {
    binary: ?*anyopaque,
    binaryBytes: usize,
    sourceMap: [*c]u8,
};
pub const BinaryenModuleAllocateAndWriteResult = struct_BinaryenModuleAllocateAndWriteResult;
pub extern fn BinaryenModuleAllocateAndWrite(module: BinaryenModuleRef, sourceMapUrl: [*c]const u8) BinaryenModuleAllocateAndWriteResult;
pub extern fn BinaryenModuleAllocateAndWriteText(module: BinaryenModuleRef) [*c]u8;
pub extern fn BinaryenModuleAllocateAndWriteStackIR(module: BinaryenModuleRef, optimize: bool) [*c]u8;
pub extern fn BinaryenModuleRead(input: [*c]u8, inputSize: usize) BinaryenModuleRef;
pub extern fn BinaryenModuleInterpret(module: BinaryenModuleRef) void;
pub extern fn BinaryenModuleAddDebugInfoFileName(module: BinaryenModuleRef, filename: [*c]const u8) BinaryenIndex;
pub extern fn BinaryenModuleGetDebugInfoFileName(module: BinaryenModuleRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenFunctionGetName(func: BinaryenFunctionRef) [*c]const u8;
pub extern fn BinaryenFunctionGetParams(func: BinaryenFunctionRef) BinaryenType;
pub extern fn BinaryenFunctionGetResults(func: BinaryenFunctionRef) BinaryenType;
pub extern fn BinaryenFunctionGetNumVars(func: BinaryenFunctionRef) BinaryenIndex;
pub extern fn BinaryenFunctionGetVar(func: BinaryenFunctionRef, index: BinaryenIndex) BinaryenType;
pub extern fn BinaryenFunctionGetNumLocals(func: BinaryenFunctionRef) BinaryenIndex;
pub extern fn BinaryenFunctionHasLocalName(func: BinaryenFunctionRef, index: BinaryenIndex) bool;
pub extern fn BinaryenFunctionGetLocalName(func: BinaryenFunctionRef, index: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenFunctionSetLocalName(func: BinaryenFunctionRef, index: BinaryenIndex, name: [*c]const u8) void;
pub extern fn BinaryenFunctionGetBody(func: BinaryenFunctionRef) BinaryenExpressionRef;
pub extern fn BinaryenFunctionSetBody(func: BinaryenFunctionRef, body: BinaryenExpressionRef) void;
pub extern fn BinaryenFunctionOptimize(func: BinaryenFunctionRef, module: BinaryenModuleRef) void;
pub extern fn BinaryenFunctionRunPasses(func: BinaryenFunctionRef, module: BinaryenModuleRef, passes: [*c][*c]const u8, numPasses: BinaryenIndex) void;
pub extern fn BinaryenFunctionSetDebugLocation(func: BinaryenFunctionRef, expr: BinaryenExpressionRef, fileIndex: BinaryenIndex, lineNumber: BinaryenIndex, columnNumber: BinaryenIndex) void;
pub extern fn BinaryenTableGetName(table: BinaryenTableRef) [*c]const u8;
pub extern fn BinaryenTableSetName(table: BinaryenTableRef, name: [*c]const u8) void;
pub extern fn BinaryenTableGetInitial(table: BinaryenTableRef) BinaryenIndex;
pub extern fn BinaryenTableSetInitial(table: BinaryenTableRef, initial: BinaryenIndex) void;
pub extern fn BinaryenTableHasMax(table: BinaryenTableRef) bool;
pub extern fn BinaryenTableGetMax(table: BinaryenTableRef) BinaryenIndex;
pub extern fn BinaryenTableSetMax(table: BinaryenTableRef, max: BinaryenIndex) void;
pub extern fn BinaryenElementSegmentGetName(elem: BinaryenElementSegmentRef) [*c]const u8;
pub extern fn BinaryenElementSegmentSetName(elem: BinaryenElementSegmentRef, name: [*c]const u8) void;
pub extern fn BinaryenElementSegmentGetTable(elem: BinaryenElementSegmentRef) [*c]const u8;
pub extern fn BinaryenElementSegmentSetTable(elem: BinaryenElementSegmentRef, table: [*c]const u8) void;
pub extern fn BinaryenElementSegmentGetOffset(elem: BinaryenElementSegmentRef) BinaryenExpressionRef;
pub extern fn BinaryenElementSegmentGetLength(elem: BinaryenElementSegmentRef) BinaryenIndex;
pub extern fn BinaryenElementSegmentGetData(elem: BinaryenElementSegmentRef, dataId: BinaryenIndex) [*c]const u8;
pub extern fn BinaryenElementSegmentIsPassive(elem: BinaryenElementSegmentRef) bool;
pub extern fn BinaryenGlobalGetName(global: BinaryenGlobalRef) [*c]const u8;
pub extern fn BinaryenGlobalGetType(global: BinaryenGlobalRef) BinaryenType;
pub extern fn BinaryenGlobalIsMutable(global: BinaryenGlobalRef) bool;
pub extern fn BinaryenGlobalGetInitExpr(global: BinaryenGlobalRef) BinaryenExpressionRef;
pub extern fn BinaryenTagGetName(tag: BinaryenTagRef) [*c]const u8;
pub extern fn BinaryenTagGetParams(tag: BinaryenTagRef) BinaryenType;
pub extern fn BinaryenTagGetResults(tag: BinaryenTagRef) BinaryenType;
pub extern fn BinaryenFunctionImportGetModule(import: BinaryenFunctionRef) [*c]const u8;
pub extern fn BinaryenTableImportGetModule(import: BinaryenTableRef) [*c]const u8;
pub extern fn BinaryenGlobalImportGetModule(import: BinaryenGlobalRef) [*c]const u8;
pub extern fn BinaryenTagImportGetModule(import: BinaryenTagRef) [*c]const u8;
pub extern fn BinaryenFunctionImportGetBase(import: BinaryenFunctionRef) [*c]const u8;
pub extern fn BinaryenTableImportGetBase(import: BinaryenTableRef) [*c]const u8;
pub extern fn BinaryenGlobalImportGetBase(import: BinaryenGlobalRef) [*c]const u8;
pub extern fn BinaryenTagImportGetBase(import: BinaryenTagRef) [*c]const u8;
pub extern fn BinaryenExportGetKind(export_: BinaryenExportRef) BinaryenExternalKind;
pub extern fn BinaryenExportGetName(export_: BinaryenExportRef) [*c]const u8;
pub extern fn BinaryenExportGetValue(export_: BinaryenExportRef) [*c]const u8;
pub extern fn BinaryenAddCustomSection(module: BinaryenModuleRef, name: [*c]const u8, contents: [*c]const u8, contentsSize: BinaryenIndex) void;
pub const BinaryenSideEffects = u32;
pub extern fn BinaryenSideEffectNone() BinaryenSideEffects;
pub extern fn BinaryenSideEffectBranches() BinaryenSideEffects;
pub extern fn BinaryenSideEffectCalls() BinaryenSideEffects;
pub extern fn BinaryenSideEffectReadsLocal() BinaryenSideEffects;
pub extern fn BinaryenSideEffectWritesLocal() BinaryenSideEffects;
pub extern fn BinaryenSideEffectReadsGlobal() BinaryenSideEffects;
pub extern fn BinaryenSideEffectWritesGlobal() BinaryenSideEffects;
pub extern fn BinaryenSideEffectReadsMemory() BinaryenSideEffects;
pub extern fn BinaryenSideEffectWritesMemory() BinaryenSideEffects;
pub extern fn BinaryenSideEffectReadsTable() BinaryenSideEffects;
pub extern fn BinaryenSideEffectWritesTable() BinaryenSideEffects;
pub extern fn BinaryenSideEffectImplicitTrap() BinaryenSideEffects;
pub extern fn BinaryenSideEffectTrapsNeverHappen() BinaryenSideEffects;
pub extern fn BinaryenSideEffectIsAtomic() BinaryenSideEffects;
pub extern fn BinaryenSideEffectThrows() BinaryenSideEffects;
pub extern fn BinaryenSideEffectDanglingPop() BinaryenSideEffects;
pub extern fn BinaryenSideEffectAny() BinaryenSideEffects;
pub extern fn BinaryenExpressionGetSideEffects(expr: BinaryenExpressionRef, module: BinaryenModuleRef) BinaryenSideEffects;
pub const struct_Relooper = opaque {};
pub const RelooperRef = ?*struct_Relooper;
pub const struct_RelooperBlock = opaque {};
pub const RelooperBlockRef = ?*struct_RelooperBlock;
pub extern fn RelooperCreate(module: BinaryenModuleRef) RelooperRef;
pub extern fn RelooperAddBlock(relooper: RelooperRef, code: BinaryenExpressionRef) RelooperBlockRef;
pub extern fn RelooperAddBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: BinaryenExpressionRef, code: BinaryenExpressionRef) void;
pub extern fn RelooperAddBlockWithSwitch(relooper: RelooperRef, code: BinaryenExpressionRef, condition: BinaryenExpressionRef) RelooperBlockRef;
pub extern fn RelooperAddBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: [*c]BinaryenIndex, numIndexes: BinaryenIndex, code: BinaryenExpressionRef) void;
pub extern fn RelooperRenderAndDispose(relooper: RelooperRef, entry: RelooperBlockRef, labelHelper: BinaryenIndex) BinaryenExpressionRef;
pub const struct_CExpressionRunner = opaque {};
pub const ExpressionRunnerRef = ?*struct_CExpressionRunner;
pub const ExpressionRunnerFlags = u32;
pub extern fn ExpressionRunnerFlagsDefault(...) ExpressionRunnerFlags;
pub extern fn ExpressionRunnerFlagsPreserveSideeffects(...) ExpressionRunnerFlags;
pub extern fn ExpressionRunnerFlagsTraverseCalls(...) ExpressionRunnerFlags;
pub extern fn ExpressionRunnerCreate(module: BinaryenModuleRef, flags: ExpressionRunnerFlags, maxDepth: BinaryenIndex, maxLoopIterations: BinaryenIndex) ExpressionRunnerRef;
pub extern fn ExpressionRunnerSetLocalValue(runner: ExpressionRunnerRef, index: BinaryenIndex, value: BinaryenExpressionRef) bool;
pub extern fn ExpressionRunnerSetGlobalValue(runner: ExpressionRunnerRef, name: [*c]const u8, value: BinaryenExpressionRef) bool;
pub extern fn ExpressionRunnerRunAndDispose(runner: ExpressionRunnerRef, expr: BinaryenExpressionRef) BinaryenExpressionRef;
pub const struct_TypeBuilder = opaque {};
pub const TypeBuilderRef = ?*struct_TypeBuilder;
pub const TypeBuilderErrorReason = u32;
pub extern fn TypeBuilderErrorReasonSelfSupertype() TypeBuilderErrorReason;
pub extern fn TypeBuilderErrorReasonInvalidSupertype() TypeBuilderErrorReason;
pub extern fn TypeBuilderErrorReasonForwardSupertypeReference() TypeBuilderErrorReason;
pub extern fn TypeBuilderErrorReasonForwardChildReference() TypeBuilderErrorReason;
pub const BinaryenBasicHeapType = u32;
pub extern fn TypeBuilderCreate(size: BinaryenIndex) TypeBuilderRef;
pub extern fn TypeBuilderGrow(builder: TypeBuilderRef, count: BinaryenIndex) void;
pub extern fn TypeBuilderGetSize(builder: TypeBuilderRef) BinaryenIndex;
pub extern fn TypeBuilderSetBasicHeapType(builder: TypeBuilderRef, index: BinaryenIndex, basicHeapType: BinaryenBasicHeapType) void;
pub extern fn TypeBuilderSetSignatureType(builder: TypeBuilderRef, index: BinaryenIndex, paramTypes: BinaryenType, resultTypes: BinaryenType) void;
pub extern fn TypeBuilderSetStructType(builder: TypeBuilderRef, index: BinaryenIndex, fieldTypes: [*c]BinaryenType, fieldPackedTypes: [*c]BinaryenPackedType, fieldMutables: [*c]bool, numFields: c_int) void;
pub extern fn TypeBuilderSetArrayType(builder: TypeBuilderRef, index: BinaryenIndex, elementType: BinaryenType, elementPackedType: BinaryenPackedType, elementMutable: c_int) void;
pub extern fn TypeBuilderIsBasic(builder: TypeBuilderRef, index: BinaryenIndex) bool;
pub extern fn TypeBuilderGetBasic(builder: TypeBuilderRef, index: BinaryenIndex) BinaryenBasicHeapType;
pub extern fn TypeBuilderGetTempHeapType(builder: TypeBuilderRef, index: BinaryenIndex) BinaryenHeapType;
pub extern fn TypeBuilderGetTempTupleType(builder: TypeBuilderRef, types: [*c]BinaryenType, numTypes: BinaryenIndex) BinaryenType;
pub extern fn TypeBuilderGetTempRefType(builder: TypeBuilderRef, heapType: BinaryenHeapType, nullable: c_int) BinaryenType;
pub extern fn TypeBuilderSetSubType(builder: TypeBuilderRef, index: BinaryenIndex, superIndex: BinaryenIndex) void;
pub extern fn TypeBuilderCreateRecGroup(builder: TypeBuilderRef, index: BinaryenIndex, length: BinaryenIndex) void;
pub extern fn TypeBuilderBuildAndDispose(builder: TypeBuilderRef, heapTypes: [*c]BinaryenHeapType, errorIndex: [*c]BinaryenIndex, errorReason: [*c]TypeBuilderErrorReason) bool;
pub extern fn BinaryenModuleSetTypeName(module: BinaryenModuleRef, heapType: BinaryenHeapType, name: [*c]const u8) void;
pub extern fn BinaryenModuleSetFieldName(module: BinaryenModuleRef, heapType: BinaryenHeapType, index: BinaryenIndex, name: [*c]const u8) void;
pub extern fn BinaryenSetColorsEnabled(enabled: bool) void;
pub extern fn BinaryenAreColorsEnabled(...) bool;
pub const WASM_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // binaryen/src/binaryen-c.h:51:9
pub const BINARYEN_REF = @compileError("unable to translate macro: undefined identifier `Binaryen`"); // binaryen/src/binaryen-c.h:74:9
pub const DELEGATE = @compileError("unable to translate macro: undefined identifier `Binaryen`"); // binaryen/src/binaryen-c.h:172:9
pub const wasm_binaryen_c_h = "";
pub const BINARYEN_API = "";
pub const BinaryenModule = struct_BinaryenModule;
pub const BinaryenLiteral = struct_BinaryenLiteral;
pub const BinaryenExpression = struct_BinaryenExpression;
pub const BinaryenFunction = struct_BinaryenFunction;
pub const BinaryenMemory = struct_BinaryenMemory;
pub const BinaryenExport = struct_BinaryenExport;
pub const BinaryenGlobal = struct_BinaryenGlobal;
pub const BinaryenTag = struct_BinaryenTag;
pub const BinaryenTable = struct_BinaryenTable;
pub const BinaryenElementSegment = struct_BinaryenElementSegment;
pub const Relooper = struct_Relooper;
pub const RelooperBlock = struct_RelooperBlock;
pub const CExpressionRunner = struct_CExpressionRunner;
pub const TypeBuilder = struct_TypeBuilder;
